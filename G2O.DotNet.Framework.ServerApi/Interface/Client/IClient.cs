// --------------------------------------------------------------------------------------------------------------------
// <copyright file="IClient.cs" company="Colony Online Project">
// -
// Copyright (C) 2016  Julian Vogel
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// -
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
// GNU General Public License for more details.
// -
// You should have received a copy of the GNU General Public License
// along with this program.If not, see<http://www.gnu.org/licenses/>.
// -
// </copyright>
// <summary>
// </summary>
//  -------------------------------------------------------------------------------------------------------------------
namespace G2O.DotNet.ServerApi.Client
{
    using System;
    using System.Net;

    using G2O.DotNet.ServerApi.Character;
    using G2O.DotNet.ServerApi.Server;

    /// <summary>
    ///     Interface for all object oriented wrapper classes for the client related functions of the G2O server API.
    /// </summary>
    public interface IClient
    {
        /// <summary>
        ///     Invokes all registered handlers if a command is received from this <see cref="IClient" />.
        /// </summary>
        event EventHandler<CommandReceivedEventArgs> CommandReceived;

        /// <summary>
        ///     Invokes all registered handlers if the <see cref="IClient" /> disconnects from the server.
        /// </summary>
        event EventHandler<ClientDisconnectedEventArgs> Disconnect;

        /// <summary>
        ///     Invokes all registered handlers if a message is received from this <see cref="IClient" />.
        /// </summary>
        event EventHandler<MessageReceivedEventArgs> MessageReceived;

        /// <summary>
        ///     Invokes all registered handlers if a <see cref="IPacket" /> is received from this <see cref="IClient" />.
        /// </summary>
        event EventHandler<PacketReceivedEventArgs> PacketReceived;

        /// <summary>
        ///     Gets the id(player id) of this <see cref="IClient" />.
        /// </summary>
        int ClientId { get; }

        /// <summary>
        ///     Gets the IP address of this <see cref="IClient" />.
        /// </summary>
        IPAddress IpAddress { get; }

        /// <summary>
        ///     Gets a value indicating whether the client is still connected.
        /// </summary>
        bool IsConnected { get; }

        /// <summary>
        ///     Gets the MAC address of the <see cref="IClient" />.
        /// </summary>
        string MacAddress { get; }

        /// <summary>
        ///     Gets the nickname that was specified by the user before connecting.
        /// </summary>
        string Nickname { get; }

        /// <summary>
        ///     Gets the ping of this <see cref="IClient" />.
        /// </summary>
        int Ping { get; }

        /// <summary>
        ///     Gets the <see cref="ICharacter" /> this <see cref="IClient" />.
        /// </summary>
        ICharacter PlayerCharacter { get; }

        /// <summary>
        ///     Gets the serial(unique id generated by G2O) of the <see cref="IClient" />.
        /// </summary>
        string Serial { get; }

        /// <summary>
        ///     Bans this <see cref="IClient" /> for a given duration
        /// </summary>
        /// <param name="reason">The Reason of the ban.</param>
        /// <param name="duration">The duration of the ban.</param>
        void Ban(string reason, int duration);

        /// <summary>
        ///     Kick this <see cref="IClient" /> from the server.
        /// </summary>
        /// <param name="reason">The reason of the kick.</param>
        void Kick(string reason);

        /// <summary>
        ///     Sends a message to this <see cref="IClient" />.
        /// </summary>
        /// <param name="r">The Red value of the message.</param>
        /// <param name="g">The Green value of the message.</param>
        /// <param name="b">The Blue value of the message.</param>
        /// <param name="message">The message text.</param>
        void SendMessage(int r, int g, int b, string message);

        /// <summary>
        ///     Sends a message from this client to all  <see cref="IClient" />s.
        /// </summary>
        /// <param name="r">The Red value of the message.</param>
        /// <param name="g">The Green value of the message.</param>
        /// <param name="b">The Blue value of the message.</param>
        /// <param name="message">The message text.</param>
        void SendMessageToAll(int r, int g, int b, string message);

        /// <summary>
        ///     Sends a message from this <see cref="IClient" /> to another  <see cref="IClient" />.
        /// </summary>
        /// <param name="receiver">The <see cref="IClient" /> that should receive the message.</param>
        /// <param name="r">The Red value of the message.</param>
        /// <param name="g">The Green value of the message.</param>
        /// <param name="b">The Blue value of the message.</param>
        /// <param name="message">The message text.</param>
        void SendMessageToClient(IClient receiver, int r, int g, int b, string message);
    }
}